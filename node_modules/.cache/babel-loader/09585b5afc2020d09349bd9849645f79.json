{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.SanityImageUrlBuilder = factory());\n})(this, function () {\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _createForOfIteratorHelperLoose(o) {\n    var i = 0;\n\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n      if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    i = o[Symbol.iterator]();\n    return i.next.bind(i);\n  }\n\n  var example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg';\n\n  function parseAssetId(ref) {\n    var _ref$split = ref.split('-'),\n        id = _ref$split[1],\n        dimensionString = _ref$split[2],\n        format = _ref$split[3];\n\n    if (!id || !dimensionString || !format) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n\n    var _dimensionString$spli = dimensionString.split('x'),\n        imgWidthStr = _dimensionString$spli[0],\n        imgHeightStr = _dimensionString$spli[1];\n\n    var width = +imgWidthStr;\n    var height = +imgHeightStr;\n    var isValidAssetId = isFinite(width) && isFinite(height);\n\n    if (!isValidAssetId) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n\n    return {\n      id: id,\n      width: width,\n      height: height,\n      format: format\n    };\n  }\n\n  var isRef = function isRef(src) {\n    var source = src;\n    return source ? typeof source._ref === 'string' : false;\n  };\n\n  var isAsset = function isAsset(src) {\n    var source = src;\n    return source ? typeof source._id === 'string' : false;\n  };\n\n  var isAssetStub = function isAssetStub(src) {\n    var source = src;\n    return source && source.asset ? typeof source.asset.url === 'string' : false;\n  };\n\n  function parseSource(source) {\n    if (!source) {\n      return null;\n    }\n\n    var image;\n\n    if (typeof source === 'string' && isUrl(source)) {\n      image = {\n        asset: {\n          _ref: urlToId(source)\n        }\n      };\n    } else if (typeof source === 'string') {\n      image = {\n        asset: {\n          _ref: source\n        }\n      };\n    } else if (isRef(source)) {\n      image = {\n        asset: source\n      };\n    } else if (isAsset(source)) {\n      image = {\n        asset: {\n          _ref: source._id || ''\n        }\n      };\n    } else if (isAssetStub(source)) {\n      image = {\n        asset: {\n          _ref: urlToId(source.asset.url)\n        }\n      };\n    } else if (typeof source.asset === 'object') {\n      image = source;\n    } else {\n      return null;\n    }\n\n    var img = source;\n\n    if (img.crop) {\n      image.crop = img.crop;\n    }\n\n    if (img.hotspot) {\n      image.hotspot = img.hotspot;\n    }\n\n    return applyDefaults(image);\n  }\n\n  function isUrl(url) {\n    return /^https?:\\/\\//.test(\"\" + url);\n  }\n\n  function urlToId(url) {\n    var parts = url.split('/').slice(-1);\n    return (\"image-\" + parts[0]).replace(/\\.([a-z]+)$/, '-$1');\n  }\n\n  function applyDefaults(image) {\n    if (image.crop && image.hotspot) {\n      return image;\n    }\n\n    var result = _extends({}, image);\n\n    if (!result.crop) {\n      result.crop = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n    }\n\n    if (!result.hotspot) {\n      result.hotspot = {\n        x: 0.5,\n        y: 0.5,\n        height: 1.0,\n        width: 1.0\n      };\n    }\n\n    return result;\n  }\n\n  var SPEC_NAME_TO_URL_NAME_MAPPINGS = [['width', 'w'], ['height', 'h'], ['format', 'fm'], ['download', 'dl'], ['blur', 'blur'], ['sharpen', 'sharp'], ['invert', 'invert'], ['orientation', 'or'], ['minHeight', 'min-h'], ['maxHeight', 'max-h'], ['minWidth', 'min-w'], ['maxWidth', 'max-w'], ['quality', 'q'], ['fit', 'fit'], ['crop', 'crop'], ['saturation', 'sat'], ['auto', 'auto'], ['dpr', 'dpr']];\n\n  function urlForImage(options) {\n    var spec = _extends({}, options || {});\n\n    var source = spec.source;\n    delete spec.source;\n    var image = parseSource(source);\n\n    if (!image) {\n      return null;\n    }\n\n    var id = image.asset._ref || image.asset._id || '';\n    var asset = parseAssetId(id);\n    var cropLeft = Math.round(image.crop.left * asset.width);\n    var cropTop = Math.round(image.crop.top * asset.height);\n    var crop = {\n      left: cropLeft,\n      top: cropTop,\n      width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n      height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n    };\n    var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n    var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n    var hotSpotCenterX = image.hotspot.x * asset.width;\n    var hotSpotCenterY = image.hotspot.y * asset.height;\n    var hotspot = {\n      left: hotSpotCenterX - hotSpotHorizontalRadius,\n      top: hotSpotCenterY - hotSpotVerticalRadius,\n      right: hotSpotCenterX + hotSpotHorizontalRadius,\n      bottom: hotSpotCenterY + hotSpotVerticalRadius\n    };\n\n    if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n      spec = _extends(_extends({}, spec), fit({\n        crop: crop,\n        hotspot: hotspot\n      }, spec));\n    }\n\n    return specToImageUrl(_extends(_extends({}, spec), {}, {\n      asset: asset\n    }));\n  }\n\n  function specToImageUrl(spec) {\n    var cdnUrl = spec.baseUrl || 'https://cdn.sanity.io';\n    var filename = spec.asset.id + \"-\" + spec.asset.width + \"x\" + spec.asset.height + \".\" + spec.asset.format;\n    var baseUrl = cdnUrl + \"/images/\" + spec.projectId + \"/\" + spec.dataset + \"/\" + filename;\n    var params = [];\n\n    if (spec.rect) {\n      var _spec$rect = spec.rect,\n          left = _spec$rect.left,\n          top = _spec$rect.top,\n          width = _spec$rect.width,\n          height = _spec$rect.height;\n      var isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n\n      if (isEffectiveCrop) {\n        params.push(\"rect=\" + left + \",\" + top + \",\" + width + \",\" + height);\n      }\n    }\n\n    if (spec.bg) {\n      params.push(\"bg=\" + spec.bg);\n    }\n\n    if (spec.focalPoint) {\n      params.push(\"fp-x=\" + spec.focalPoint.x);\n      params.push(\"fp-y=\" + spec.focalPoint.y);\n    }\n\n    var flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('');\n\n    if (flip) {\n      params.push(\"flip=\" + flip);\n    }\n\n    SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function (mapping) {\n      var specName = mapping[0],\n          param = mapping[1];\n\n      if (typeof spec[specName] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[specName]));\n      } else if (typeof spec[param] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[param]));\n      }\n    });\n\n    if (params.length === 0) {\n      return baseUrl;\n    }\n\n    return baseUrl + \"?\" + params.join('&');\n  }\n\n  function fit(source, spec) {\n    var cropRect;\n    var imgWidth = spec.width;\n    var imgHeight = spec.height;\n\n    if (!(imgWidth && imgHeight)) {\n      return {\n        width: imgWidth,\n        height: imgHeight,\n        rect: source.crop\n      };\n    }\n\n    var crop = source.crop;\n    var hotspot = source.hotspot;\n    var desiredAspectRatio = imgWidth / imgHeight;\n    var cropAspectRatio = crop.width / crop.height;\n\n    if (cropAspectRatio > desiredAspectRatio) {\n      var height = crop.height;\n      var width = height * desiredAspectRatio;\n      var top = crop.top;\n      var hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left;\n      var left = hotspotXCenter - width / 2;\n\n      if (left < crop.left) {\n        left = crop.left;\n      } else if (left + width > crop.left + crop.width) {\n        left = crop.left + crop.width - width;\n      }\n\n      cropRect = {\n        left: Math.round(left),\n        top: Math.round(top),\n        width: Math.round(width),\n        height: Math.round(height)\n      };\n    } else {\n      var _width = crop.width;\n\n      var _height = _width / desiredAspectRatio;\n\n      var _left = crop.left;\n      var hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top;\n\n      var _top = hotspotYCenter - _height / 2;\n\n      if (_top < crop.top) {\n        _top = crop.top;\n      } else if (_top + _height > crop.top + crop.height) {\n        _top = crop.top + crop.height - _height;\n      }\n\n      cropRect = {\n        left: Math.max(0, Math.floor(_left)),\n        top: Math.max(0, Math.floor(_top)),\n        width: Math.round(_width),\n        height: Math.round(_height)\n      };\n    }\n\n    return {\n      width: imgWidth,\n      height: imgHeight,\n      rect: cropRect\n    };\n  }\n\n  var validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min'];\n  var validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy'];\n  var validAutoModes = ['format'];\n\n  function isSanityClient(client) {\n    return client ? typeof client.clientConfig === 'object' : false;\n  }\n\n  function rewriteSpecName(key) {\n    var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS;\n\n    for (var _iterator = _createForOfIteratorHelperLoose(specs), _step; !(_step = _iterator()).done;) {\n      var entry = _step.value;\n      var specName = entry[0],\n          param = entry[1];\n\n      if (key === specName || key === param) {\n        return specName;\n      }\n    }\n\n    return key;\n  }\n\n  function urlBuilder(options) {\n    var client = options;\n\n    if (isSanityClient(client)) {\n      var _client$clientConfig = client.clientConfig,\n          apiUrl = _client$clientConfig.apiHost,\n          projectId = _client$clientConfig.projectId,\n          dataset = _client$clientConfig.dataset;\n      var apiHost = apiUrl || 'https://api.sanity.io';\n      return new ImageUrlBuilder(null, {\n        baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n        projectId: projectId,\n        dataset: dataset\n      });\n    }\n\n    return new ImageUrlBuilder(null, options);\n  }\n\n  var ImageUrlBuilder = /*#__PURE__*/function () {\n    function ImageUrlBuilder(parent, options) {\n      this.options = parent ? _extends(_extends({}, parent.options || {}), options || {}) : _extends({}, options || {});\n    }\n\n    var _proto = ImageUrlBuilder.prototype;\n\n    _proto.withOptions = function withOptions(options) {\n      var baseUrl = options.baseUrl || this.options.baseUrl;\n      var newOptions = {\n        baseUrl: baseUrl\n      };\n\n      for (var key in options) {\n        if (options.hasOwnProperty(key)) {\n          var specKey = rewriteSpecName(key);\n          newOptions[specKey] = options[key];\n        }\n      }\n\n      return new ImageUrlBuilder(this, _extends({\n        baseUrl: baseUrl\n      }, newOptions));\n    };\n\n    _proto.image = function image(source) {\n      return this.withOptions({\n        source: source\n      });\n    };\n\n    _proto.dataset = function dataset(_dataset) {\n      return this.withOptions({\n        dataset: _dataset\n      });\n    };\n\n    _proto.projectId = function projectId(_projectId) {\n      return this.withOptions({\n        projectId: _projectId\n      });\n    };\n\n    _proto.bg = function bg(_bg) {\n      return this.withOptions({\n        bg: _bg\n      });\n    };\n\n    _proto.dpr = function dpr(_dpr) {\n      return this.withOptions({\n        dpr: _dpr\n      });\n    };\n\n    _proto.width = function width(_width) {\n      return this.withOptions({\n        width: _width\n      });\n    };\n\n    _proto.height = function height(_height) {\n      return this.withOptions({\n        height: _height\n      });\n    };\n\n    _proto.focalPoint = function focalPoint(x, y) {\n      return this.withOptions({\n        focalPoint: {\n          x: x,\n          y: y\n        }\n      });\n    };\n\n    _proto.maxWidth = function maxWidth(_maxWidth) {\n      return this.withOptions({\n        maxWidth: _maxWidth\n      });\n    };\n\n    _proto.minWidth = function minWidth(_minWidth) {\n      return this.withOptions({\n        minWidth: _minWidth\n      });\n    };\n\n    _proto.maxHeight = function maxHeight(_maxHeight) {\n      return this.withOptions({\n        maxHeight: _maxHeight\n      });\n    };\n\n    _proto.minHeight = function minHeight(_minHeight) {\n      return this.withOptions({\n        minHeight: _minHeight\n      });\n    };\n\n    _proto.size = function size(width, height) {\n      return this.withOptions({\n        width: width,\n        height: height\n      });\n    };\n\n    _proto.blur = function blur(_blur) {\n      return this.withOptions({\n        blur: _blur\n      });\n    };\n\n    _proto.sharpen = function sharpen(_sharpen) {\n      return this.withOptions({\n        sharpen: _sharpen\n      });\n    };\n\n    _proto.rect = function rect(left, top, width, height) {\n      return this.withOptions({\n        rect: {\n          left: left,\n          top: top,\n          width: width,\n          height: height\n        }\n      });\n    };\n\n    _proto.format = function format(_format) {\n      return this.withOptions({\n        format: _format\n      });\n    };\n\n    _proto.invert = function invert(_invert) {\n      return this.withOptions({\n        invert: _invert\n      });\n    };\n\n    _proto.orientation = function orientation(_orientation) {\n      return this.withOptions({\n        orientation: _orientation\n      });\n    };\n\n    _proto.quality = function quality(_quality) {\n      return this.withOptions({\n        quality: _quality\n      });\n    };\n\n    _proto.forceDownload = function forceDownload(download) {\n      return this.withOptions({\n        download: download\n      });\n    };\n\n    _proto.flipHorizontal = function flipHorizontal() {\n      return this.withOptions({\n        flipHorizontal: true\n      });\n    };\n\n    _proto.flipVertical = function flipVertical() {\n      return this.withOptions({\n        flipVertical: true\n      });\n    };\n\n    _proto.ignoreImageParams = function ignoreImageParams() {\n      return this.withOptions({\n        ignoreImageParams: true\n      });\n    };\n\n    _proto.fit = function fit(value) {\n      if (validFits.indexOf(value) === -1) {\n        throw new Error(\"Invalid fit mode \\\"\" + value + \"\\\"\");\n      }\n\n      return this.withOptions({\n        fit: value\n      });\n    };\n\n    _proto.crop = function crop(value) {\n      if (validCrops.indexOf(value) === -1) {\n        throw new Error(\"Invalid crop mode \\\"\" + value + \"\\\"\");\n      }\n\n      return this.withOptions({\n        crop: value\n      });\n    };\n\n    _proto.saturation = function saturation(_saturation) {\n      return this.withOptions({\n        saturation: _saturation\n      });\n    };\n\n    _proto.auto = function auto(value) {\n      if (validAutoModes.indexOf(value) === -1) {\n        throw new Error(\"Invalid auto mode \\\"\" + value + \"\\\"\");\n      }\n\n      return this.withOptions({\n        auto: value\n      });\n    };\n\n    _proto.url = function url() {\n      return urlForImage(this.options);\n    };\n\n    _proto.toString = function toString() {\n      return this.url();\n    };\n\n    return ImageUrlBuilder;\n  }();\n\n  return urlBuilder;\n});","map":{"version":3,"sources":["../../src/parseAssetId.ts","../../src/parseSource.ts","../../src/urlForImage.ts","../../src/builder.ts"],"names":["example","parseAssetId","ref","id","dimensionString","format","imgWidthStr","imgHeightStr","width","height","isValidAssetId","isFinite","isRef","source","isAsset","isAssetStub","parseSource","isUrl","image","asset","_ref","urlToId","img","applyDefaults","parts","url","result","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","cropLeft","Math","cropTop","crop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","hotspot","fit","specToImageUrl","cdnUrl","filename","baseUrl","params","isEffectiveCrop","flip","specName","param","mapping","encodeURIComponent","imgWidth","imgHeight","rect","desiredAspectRatio","cropAspectRatio","hotspotXCenter","cropRect","hotspotYCenter","validFits","validCrops","validAutoModes","client","specs","entry","key","urlBuilder","isSanityClient","apiUrl","projectId","dataset","apiHost","ImageUrlBuilder","parent","withOptions","newOptions","specKey","rewriteSpecName","bg","dpr","focalPoint","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","flipHorizontal","flipVertical","ignoreImageParams","value","saturation","auto","toString"],"mappings":"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","sourcesContent":["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions) {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    return null\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = crop.height\n    const width = height * desiredAspectRatio\n    const top = crop.top\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left\n    let left = hotspotXCenter - width / 2\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {\n      left: Math.round(left),\n      top: Math.round(top),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = width / desiredAspectRatio\n    const left = crop.left\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top\n    let top = hotspotYCenter - height / 2\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {\n      left: Math.max(0, Math.floor(left)),\n      top: Math.max(0, Math.floor(top)),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClient,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClient(client?: SanityClient): client is SanityClient {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClient | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClient\n  if (isSanityClient(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    return this.withOptions({dpr})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image verically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
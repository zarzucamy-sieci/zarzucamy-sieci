{"ast":null,"code":"'use strict';\n\nvar objectAssign = require('object-assign');\n\nmodule.exports = function (opts) {\n  return {\n    onResponse: function onResponse(response) {\n      var contentType = response.headers['content-type'] || '';\n      var shouldDecode = opts && opts.force || contentType.indexOf('application/json') !== -1;\n\n      if (!response.body || !contentType || !shouldDecode) {\n        return response;\n      }\n\n      return objectAssign({}, response, {\n        body: tryParse(response.body)\n      });\n    },\n    processOptions: function processOptions(options) {\n      return objectAssign({}, options, {\n        headers: objectAssign({\n          Accept: 'application/json'\n        }, options.headers)\n      });\n    }\n  };\n};\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body);\n  } catch (err) {\n    err.message = 'Failed to parsed response body as JSON: ' + err.message;\n    throw err;\n  }\n}","map":{"version":3,"sources":["../../src/middleware/jsonResponse.js"],"names":["objectAssign","require","module","onResponse","contentType","response","shouldDecode","opts","body","tryParse","processOptions","headers","Accept","options","JSON","err"],"mappings":";;AAAA,IAAMA,YAAAA,GAAeC,OAAAA,CAArB,eAAqBA,CAArB;;AAEAC,MAAAA,CAAAA,OAAAA,GAAiB,UAAA,IAAA,EAAA;AAAA,SAAS;AACxBC,IAAAA,UAAAA,EAAY,SAAA,UAAA,CAAA,QAAA,EAAY;AACtB,UAAMC,WAAAA,GAAcC,QAAAA,CAAAA,OAAAA,CAAAA,cAAAA,KAApB,EAAA;AACA,UAAMC,YAAAA,GAAgBC,IAAAA,IAAQA,IAAAA,CAAT,KAACA,IAAuBH,WAAAA,CAAAA,OAAAA,CAAAA,kBAAAA,MAA4C,CAAzF,CAAA;;AACA,UAAI,CAACC,QAAAA,CAAD,IAAA,IAAkB,CAAlB,WAAA,IAAkC,CAAtC,YAAA,EAAqD;AACnD,eAAA,QAAA;AACD;;AAED,aAAOL,YAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAA2B;AAACQ,QAAAA,IAAAA,EAAMC,QAAAA,CAASJ,QAAAA,CAAlD,IAAyCI;AAAP,OAA3BT,CAAP;AARsB,KAAA;AAWxBU,IAAAA,cAAAA,EAAgB,SAAA,cAAA,CAAA,OAAA,EAAA;AAAA,aACd,YAAA,CAAA,EAAA,EAAA,OAAA,EAA0B;AACxBC,QAAAA,OAAAA,EAASX,YAAAA,CAAa;AAACY,UAAAA,MAAAA,EAAdZ;AAAa,SAAbA,EAA2Ca,OAAAA,CAA3Cb,OAAAA;AADe,OAA1B,CADc;AAAA;AAXQ,GAAT;AAAjBE,CAAAA;;AAiBA,SAAA,QAAA,CAAA,IAAA,EAAwB;AACtB,MAAI;AACF,WAAOY,IAAAA,CAAAA,KAAAA,CAAP,IAAOA,CAAP;AADF,GAAA,CAEE,OAAA,GAAA,EAAY;AACZC,IAAAA,GAAAA,CAAAA,OAAAA,GAAAA,6CAAyDA,GAAAA,CAAzDA,OAAAA;AACA,UAAA,GAAA;AACD;AACF","sourcesContent":["const objectAssign = require('object-assign')\n\nmodule.exports = opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return objectAssign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    objectAssign({}, options, {\n      headers: objectAssign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
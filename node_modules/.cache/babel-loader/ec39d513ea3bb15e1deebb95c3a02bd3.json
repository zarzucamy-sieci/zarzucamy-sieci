{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-empty-function, no-process-env */\n\nvar getIt = require('get-it');\n\nvar assign = require('object-assign');\n\nvar observable = require('get-it/lib/middleware/observable');\n\nvar jsonRequest = require('get-it/lib/middleware/jsonRequest');\n\nvar jsonResponse = require('get-it/lib/middleware/jsonResponse');\n\nvar progress = require('get-it/lib/middleware/progress');\n\nvar Observable = require('@sanity/observable/minimal');\n\nvar _require = require('./errors'),\n    ClientError = _require.ClientError,\n    ServerError = _require.ServerError;\n\nvar httpError = {\n  onResponse: function onResponse(res) {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n\n    return res;\n  }\n}; // Environment-specific middleware.\n\nvar envSpecific = require('./nodeMiddleware');\n\nvar middleware = envSpecific.concat([jsonRequest(), jsonResponse(), progress(), httpError, observable({\n  implementation: Observable\n})]);\nvar request = getIt(middleware);\n\nfunction httpRequest(options) {\n  var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n  return requester(assign({\n    maxRedirects: 0\n  }, options));\n}\n\nhttpRequest.defaultRequester = request;\nhttpRequest.ClientError = ClientError;\nhttpRequest.ServerError = ServerError;\nmodule.exports = httpRequest;","map":{"version":3,"sources":["C:/Users/enthusiast/Documents/Informatyka/Projekty/Zarzucamy_Sieci_Blog/create-react-app-blog-master/node_modules/@sanity/client/lib/http/request.js"],"names":["getIt","require","assign","observable","jsonRequest","jsonResponse","progress","Observable","_require","ClientError","ServerError","httpError","onResponse","res","statusCode","envSpecific","middleware","concat","implementation","request","httpRequest","options","requester","arguments","length","undefined","maxRedirects","defaultRequester","module","exports"],"mappings":"AAAA;AAEA;;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAIE,UAAU,GAAGF,OAAO,CAAC,kCAAD,CAAxB;;AAEA,IAAIG,WAAW,GAAGH,OAAO,CAAC,mCAAD,CAAzB;;AAEA,IAAII,YAAY,GAAGJ,OAAO,CAAC,oCAAD,CAA1B;;AAEA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,gCAAD,CAAtB;;AAEA,IAAIM,UAAU,GAAGN,OAAO,CAAC,4BAAD,CAAxB;;AAEA,IAAIO,QAAQ,GAAGP,OAAO,CAAC,UAAD,CAAtB;AAAA,IACIQ,WAAW,GAAGD,QAAQ,CAACC,WAD3B;AAAA,IAEIC,WAAW,GAAGF,QAAQ,CAACE,WAF3B;;AAIA,IAAIC,SAAS,GAAG;AACdC,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACnC,QAAIA,GAAG,CAACC,UAAJ,IAAkB,GAAtB,EAA2B;AACzB,YAAM,IAAIJ,WAAJ,CAAgBG,GAAhB,CAAN;AACD,KAFD,MAEO,IAAIA,GAAG,CAACC,UAAJ,IAAkB,GAAtB,EAA2B;AAChC,YAAM,IAAIL,WAAJ,CAAgBI,GAAhB,CAAN;AACD;;AAED,WAAOA,GAAP;AACD;AATa,CAAhB,C,CAUG;;AAEH,IAAIE,WAAW,GAAGd,OAAO,CAAC,kBAAD,CAAzB;;AAEA,IAAIe,UAAU,GAAGD,WAAW,CAACE,MAAZ,CAAmB,CAACb,WAAW,EAAZ,EAAgBC,YAAY,EAA5B,EAAgCC,QAAQ,EAAxC,EAA4CK,SAA5C,EAAuDR,UAAU,CAAC;AACpGe,EAAAA,cAAc,EAAEX;AADoF,CAAD,CAAjE,CAAnB,CAAjB;AAGA,IAAIY,OAAO,GAAGnB,KAAK,CAACgB,UAAD,CAAnB;;AAEA,SAASI,WAAT,CAAqBC,OAArB,EAA8B;AAC5B,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEJ,OAApF;AACA,SAAOG,SAAS,CAACpB,MAAM,CAAC;AACtBwB,IAAAA,YAAY,EAAE;AADQ,GAAD,EAEpBL,OAFoB,CAAP,CAAhB;AAGD;;AAEDD,WAAW,CAACO,gBAAZ,GAA+BR,OAA/B;AACAC,WAAW,CAACX,WAAZ,GAA0BA,WAA1B;AACAW,WAAW,CAACV,WAAZ,GAA0BA,WAA1B;AACAkB,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["\"use strict\";\n\n/* eslint-disable no-empty-function, no-process-env */\nvar getIt = require('get-it');\n\nvar assign = require('object-assign');\n\nvar observable = require('get-it/lib/middleware/observable');\n\nvar jsonRequest = require('get-it/lib/middleware/jsonRequest');\n\nvar jsonResponse = require('get-it/lib/middleware/jsonResponse');\n\nvar progress = require('get-it/lib/middleware/progress');\n\nvar Observable = require('@sanity/observable/minimal');\n\nvar _require = require('./errors'),\n    ClientError = _require.ClientError,\n    ServerError = _require.ServerError;\n\nvar httpError = {\n  onResponse: function onResponse(res) {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n\n    return res;\n  }\n}; // Environment-specific middleware.\n\nvar envSpecific = require('./nodeMiddleware');\n\nvar middleware = envSpecific.concat([jsonRequest(), jsonResponse(), progress(), httpError, observable({\n  implementation: Observable\n})]);\nvar request = getIt(middleware);\n\nfunction httpRequest(options) {\n  var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n  return requester(assign({\n    maxRedirects: 0\n  }, options));\n}\n\nhttpRequest.defaultRequester = request;\nhttpRequest.ClientError = ClientError;\nhttpRequest.ServerError = ServerError;\nmodule.exports = httpRequest;"]},"metadata":{},"sourceType":"script"}
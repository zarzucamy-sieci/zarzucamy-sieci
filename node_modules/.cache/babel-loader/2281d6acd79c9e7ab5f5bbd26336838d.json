{"ast":null,"code":"\"use strict\";\n\nvar objectAssign = require('object-assign');\n\nvar buildMarksTree = require('./buildMarksTree');\n\nvar nestLists = require('./nestLists');\n\nvar generateKeys = require('./generateKeys');\n\nvar mergeSerializers = require('./mergeSerializers'); // Properties to extract from props and pass to serializers as options\n\n\nvar optionProps = ['projectId', 'dataset', 'imageOptions'];\n\nvar isDefined = function isDefined(val) {\n  return typeof val !== 'undefined';\n};\n\nvar defaults = {\n  imageOptions: {}\n};\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  var props = objectAssign({}, defaults, properties);\n  var rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks];\n  var keyedBlocks = generateKeys(rawBlocks);\n  var blocks = nestLists(keyedBlocks, props.listNestMode);\n  var serializers = mergeSerializers(defaultSerializers, props.serializers || {});\n  var options = optionProps.reduce(function (opts, key) {\n    var value = props[key];\n\n    if (isDefined(value)) {\n      opts[key] = value;\n    }\n\n    return opts;\n  }, {});\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node);\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings));\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {\n        serializeNode: serializeNode\n      });\n    }\n\n    return serializeBlock(node, index, isInline);\n  }\n\n  function findListItemIndex(node, siblings) {\n    var index = 0;\n\n    for (var i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index;\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue;\n      }\n\n      index++;\n    }\n\n    return index;\n  }\n\n  function serializeBlock(block, index, isInline) {\n    var tree = buildMarksTree(block);\n    var children = tree.map(function (node, i, siblings) {\n      return serializeNode(node, i, siblings, true);\n    });\n    var blockProps = {\n      key: block._key || \"block-\".concat(index),\n      node: block,\n      isInline: isInline,\n      serializers: serializers,\n      options: options\n    };\n    return h(serializers.block, blockProps, children);\n  }\n\n  function serializeListItem(block, index) {\n    var key = block._key;\n    var tree = buildMarksTree(block);\n    var children = tree.map(serializeNode);\n    return h(serializers.listItem, {\n      node: block,\n      serializers: serializers,\n      index: index,\n      key: key,\n      options: options\n    }, children);\n  }\n\n  function serializeList(list) {\n    var type = list.listItem;\n    var level = list.level;\n    var key = list._key;\n    var children = list.children.map(serializeNode);\n    return h(serializers.list, {\n      key: key,\n      level: level,\n      type: type,\n      options: options\n    }, children);\n  } // Default to false, so `undefined` will evaluate to the default here\n\n\n  var renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild);\n  var nodes = blocks.map(serializeNode);\n\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    var containerProps = props.className ? {\n      className: props.className\n    } : {};\n    return h(serializers.container, containerProps, nodes);\n  }\n\n  if (nodes[0]) {\n    return nodes[0];\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty;\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem;\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem;\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span';\n}\n\nmodule.exports = blocksToNodes;","map":{"version":3,"sources":["../src/blocksToNodes.js"],"names":["objectAssign","require","buildMarksTree","nestLists","generateKeys","mergeSerializers","optionProps","isDefined","defaults","imageOptions","props","rawBlocks","Array","keyedBlocks","blocks","serializers","options","value","opts","isList","serializeList","isListItem","serializeListItem","findListItemIndex","isSpan","serializeSpan","serializeNode","serializeBlock","index","i","siblings","tree","children","blockProps","key","block","node","isInline","h","type","list","level","renderContainerOnSingleChild","Boolean","nodes","containerProps","className","module"],"mappings":"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","sourcesContent":["const objectAssign = require('object-assign')\nconst buildMarksTree = require('./buildMarksTree')\nconst nestLists = require('./nestLists')\nconst generateKeys = require('./generateKeys')\nconst mergeSerializers = require('./mergeSerializers')\n\n// Properties to extract from props and pass to serializers as options\nconst optionProps = ['projectId', 'dataset', 'imageOptions']\nconst isDefined = val => typeof val !== 'undefined'\nconst defaults = {imageOptions: {}}\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  const props = objectAssign({}, defaults, properties)\n  const rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks]\n  const keyedBlocks = generateKeys(rawBlocks)\n  const blocks = nestLists(keyedBlocks, props.listNestMode)\n  const serializers = mergeSerializers(defaultSerializers, props.serializers || {})\n\n  const options = optionProps.reduce((opts, key) => {\n    const value = props[key]\n    if (isDefined(value)) {\n      opts[key] = value\n    }\n    return opts\n  }, {})\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node)\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings))\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {serializeNode})\n    }\n\n    return serializeBlock(node, index, isInline)\n  }\n\n  function findListItemIndex(node, siblings) {\n    let index = 0\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  function serializeBlock(block, index, isInline) {\n    const tree = buildMarksTree(block)\n    const children = tree.map((node, i, siblings) => serializeNode(node, i, siblings, true))\n    const blockProps = {\n      key: block._key || `block-${index}`,\n      node: block,\n      isInline,\n      serializers,\n      options\n    }\n\n    return h(serializers.block, blockProps, children)\n  }\n\n  function serializeListItem(block, index) {\n    const key = block._key\n    const tree = buildMarksTree(block)\n    const children = tree.map(serializeNode)\n    return h(serializers.listItem, {node: block, serializers, index, key, options}, children)\n  }\n\n  function serializeList(list) {\n    const type = list.listItem\n    const level = list.level\n    const key = list._key\n    const children = list.children.map(serializeNode)\n    return h(serializers.list, {key, level, type, options}, children)\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  const renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild)\n\n  const nodes = blocks.map(serializeNode)\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    const containerProps = props.className ? {className: props.className} : {}\n    return h(serializers.container, containerProps, nodes)\n  }\n\n  if (nodes[0]) {\n    return nodes[0]\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span'\n}\n\nmodule.exports = blocksToNodes\n"]},"metadata":{},"sourceType":"script"}
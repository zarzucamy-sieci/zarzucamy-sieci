{"ast":null,"code":"/*\n * EventSource polyfill\n * Originally published by sc AmvTek srl (https://github.com/amvtek/EventSource) - devel@amvtek.com\n * Forked by Espen Hovlandsdal to fix a few issues + publish latest version\n */\n;\n\n(function (root, factory) {\n  /* global define */\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    if (global.EventSource && !global._eventSourceImportPrefix) {\n      return;\n    }\n\n    var evsImportName = (root._eventSourceImportPrefix || '') + 'EventSource';\n    root[evsImportName] = factory();\n  }\n})(typeof self === 'undefined' ? this : self, function () {\n  var EventSource = function (url, options) {\n    if (!url || typeof url != 'string') {\n      throw new SyntaxError('Not enough arguments');\n    }\n\n    this.URL = url;\n    this.setOptions(options);\n    var evs = this;\n    setTimeout(function () {\n      evs.poll();\n    }, 0);\n  };\n\n  EventSource.prototype = {\n    CONNECTING: 0,\n    OPEN: 1,\n    CLOSED: 2,\n    defaultOptions: {\n      loggingEnabled: false,\n      loggingPrefix: 'eventsource',\n      interval: 500,\n      // milliseconds\n      bufferSizeLimit: 256 * 1024,\n      // bytes\n      silentTimeout: 300000,\n      // milliseconds\n      getArgs: {\n        evs_buffer_size_limit: 256 * 1024\n      },\n      xhrHeaders: {\n        Accept: 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    },\n    setOptions: function (options) {\n      var defaults = this.defaultOptions;\n      var option; // set all default options...\n\n      for (option in defaults) {\n        if (defaults.hasOwnProperty(option)) {\n          this[option] = defaults[option];\n        }\n      } // override with what is in options\n\n\n      for (option in options) {\n        if (option in defaults && options.hasOwnProperty(option)) {\n          this[option] = options[option];\n        }\n      } // if getArgs option is enabled\n      // ensure evs_buffer_size_limit corresponds to bufferSizeLimit\n\n\n      if (this.getArgs && this.bufferSizeLimit) {\n        this.getArgs.evs_buffer_size_limit = this.bufferSizeLimit;\n      } // if console is not available, force loggingEnabled to false\n      // eslint-disable-next-line no-console\n\n\n      if (typeof console === 'undefined' || typeof console.log === 'undefined') {\n        this.loggingEnabled = false;\n      }\n    },\n    log: function (message) {\n      if (this.loggingEnabled) {\n        // eslint-disable-next-line no-console\n        console.log('[' + this.loggingPrefix + ']:' + message);\n      }\n    },\n    poll: function () {\n      try {\n        if (this.readyState == this.CLOSED) {\n          return;\n        }\n\n        this.cleanup();\n        this.readyState = this.CONNECTING;\n        this.cursor = 0;\n        this.cache = '';\n        this._xhr = new this.XHR(this);\n        this.resetNoActivityTimer();\n      } catch (err) {\n        // in an attempt to silence the errors\n        this.log('There were errors inside the pool try-catch');\n        this.dispatchEvent('error', {\n          type: 'error',\n          data: err.message\n        });\n      }\n    },\n    pollAgain: function (interval) {\n      // schedule poll to be called after interval milliseconds\n      var evs = this;\n      evs.readyState = evs.CONNECTING;\n      evs.dispatchEvent('error', {\n        type: 'error',\n        data: 'Reconnecting '\n      });\n      this._pollTimer = setTimeout(function () {\n        evs.poll();\n      }, interval || 0);\n    },\n    cleanup: function () {\n      this.log('evs cleaning up');\n\n      if (this._pollTimer) {\n        clearInterval(this._pollTimer);\n        this._pollTimer = null;\n      }\n\n      if (this._noActivityTimer) {\n        clearInterval(this._noActivityTimer);\n        this._noActivityTimer = null;\n      }\n\n      if (this._xhr) {\n        this._xhr.abort();\n\n        this._xhr = null;\n      }\n    },\n    resetNoActivityTimer: function () {\n      if (this.silentTimeout) {\n        if (this._noActivityTimer) {\n          clearInterval(this._noActivityTimer);\n        }\n\n        var evs = this;\n        this._noActivityTimer = setTimeout(function () {\n          evs.log('Timeout! silentTImeout:' + evs.silentTimeout);\n          evs.pollAgain();\n        }, this.silentTimeout);\n      }\n    },\n    close: function () {\n      this.readyState = this.CLOSED;\n      this.log('Closing connection. readyState: ' + this.readyState);\n      this.cleanup();\n    },\n    _onxhrdata: function () {\n      var request = this._xhr;\n\n      if (request.isReady() && !request.hasError()) {\n        // reset the timer, as we have activity\n        this.resetNoActivityTimer(); // move this EventSource to OPEN state...\n\n        if (this.readyState == this.CONNECTING) {\n          this.readyState = this.OPEN;\n          this.dispatchEvent('open', {\n            type: 'open'\n          });\n        }\n\n        var buffer = request.getBuffer();\n\n        if (buffer.length > this.bufferSizeLimit) {\n          this.log('buffer.length > this.bufferSizeLimit');\n          this.pollAgain();\n        }\n\n        if (this.cursor == 0 && buffer.length > 0) {\n          // skip byte order mark \\uFEFF character if it starts the stream\n          if (buffer.substring(0, 1) == '\\uFEFF') {\n            this.cursor = 1;\n          }\n        }\n\n        var lastMessageIndex = this.lastMessageIndex(buffer);\n\n        if (lastMessageIndex[0] >= this.cursor) {\n          var newcursor = lastMessageIndex[1];\n          var toparse = buffer.substring(this.cursor, newcursor);\n          this.parseStream(toparse);\n          this.cursor = newcursor;\n        } // if request is finished, reopen the connection\n\n\n        if (request.isDone()) {\n          this.log('request.isDone(). reopening the connection');\n          this.pollAgain(this.interval);\n        }\n      } else if (this.readyState !== this.CLOSED) {\n        this.log('this.readyState !== this.CLOSED');\n        this.pollAgain(this.interval); //MV: Unsure why an error was previously dispatched\n      }\n    },\n    parseStream: function (chunk) {\n      // normalize line separators (\\r\\n,\\r,\\n) to \\n\n      // remove white spaces that may precede \\n\n      chunk = this.cache + this.normalizeToLF(chunk);\n      var events = chunk.split('\\n\\n');\n      var i, j, eventType, datas, line, retry;\n\n      for (i = 0; i < events.length - 1; i++) {\n        eventType = 'message';\n        datas = [];\n        var parts = events[i].split('\\n');\n\n        for (j = 0; j < parts.length; j++) {\n          line = this.trimWhiteSpace(parts[j]);\n\n          if (line.indexOf('event') == 0) {\n            eventType = line.replace(/event:?\\s*/, '');\n          } else if (line.indexOf('retry') == 0) {\n            retry = parseInt(line.replace(/retry:?\\s*/, ''), 10);\n\n            if (!isNaN(retry)) {\n              this.interval = retry;\n            }\n          } else if (line.indexOf('data') == 0) {\n            datas.push(line.replace(/data:?\\s*/, ''));\n          } else if (line.indexOf('id:') == 0) {\n            this.lastEventId = line.replace(/id:?\\s*/, '');\n          } else if (line.indexOf('id') == 0) {\n            // this resets the id\n            this.lastEventId = null;\n          }\n        }\n\n        if (datas.length && this.readyState != this.CLOSED) {\n          // dispatch a new event\n          var event = new MessageEvent(eventType, datas.join('\\n'), typeof window !== 'undefined' && typeof window.location !== 'undefined' ? window.location.origin : null, this.lastEventId);\n          this.dispatchEvent(eventType, event);\n        }\n      }\n\n      this.cache = events[events.length - 1];\n    },\n    dispatchEvent: function (type, event) {\n      var handlers = this['_' + type + 'Handlers'];\n\n      if (handlers) {\n        for (var i = 0; i < handlers.length; i++) {\n          handlers[i].call(this, event);\n        }\n      }\n\n      if (this['on' + type]) {\n        this['on' + type].call(this, event);\n      }\n    },\n    addEventListener: function (type, handler) {\n      if (!this['_' + type + 'Handlers']) {\n        this['_' + type + 'Handlers'] = [];\n      }\n\n      this['_' + type + 'Handlers'].push(handler);\n    },\n    removeEventListener: function (type, handler) {\n      var handlers = this['_' + type + 'Handlers'];\n\n      if (!handlers) {\n        return;\n      }\n\n      for (var i = handlers.length - 1; i >= 0; --i) {\n        if (handlers[i] === handler) {\n          handlers.splice(i, 1);\n          break;\n        }\n      }\n    },\n    _pollTimer: null,\n    _noactivityTimer: null,\n    _xhr: null,\n    lastEventId: null,\n    cache: '',\n    cursor: 0,\n    onerror: null,\n    onmessage: null,\n    onopen: null,\n    readyState: 0,\n    // ===================================================================\n    // helpers functions\n    // those are attached to prototype to ease reuse and testing...\n    urlWithParams: function (baseURL, params) {\n      var encodedArgs = [];\n\n      if (params) {\n        var key, urlarg;\n        var urlize = encodeURIComponent;\n\n        for (key in params) {\n          if (params.hasOwnProperty(key)) {\n            urlarg = urlize(key) + '=' + urlize(params[key]);\n            encodedArgs.push(urlarg);\n          }\n        }\n      }\n\n      if (encodedArgs.length > 0) {\n        if (baseURL.indexOf('?') == -1) return baseURL + '?' + encodedArgs.join('&');\n        return baseURL + '&' + encodedArgs.join('&');\n      }\n\n      return baseURL;\n    },\n    lastMessageIndex: function (text) {\n      var ln2 = text.lastIndexOf('\\n\\n');\n      var lr2 = text.lastIndexOf('\\r\\r');\n      var lrln2 = text.lastIndexOf('\\r\\n\\r\\n');\n\n      if (lrln2 > Math.max(ln2, lr2)) {\n        return [lrln2, lrln2 + 4];\n      }\n\n      return [Math.max(ln2, lr2), Math.max(ln2, lr2) + 2];\n    },\n    trimWhiteSpace: function (str) {\n      // to remove whitespaces left and right of string\n      var reTrim = /^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g;\n      return str.replace(reTrim, '');\n    },\n    normalizeToLF: function (str) {\n      // replace \\r and \\r\\n with \\n\n      return str.replace(/\\r\\n|\\r/g, '\\n');\n    }\n  };\n\n  if (isOldIE()) {\n    EventSource.isPolyfill = 'IE_8-9'; // patch EventSource defaultOptions\n\n    var defaults = EventSource.prototype.defaultOptions;\n    defaults.xhrHeaders = null; // no headers will be sent\n\n    defaults.getArgs.evs_preamble = 2048 + 8; // EventSource will send request using Internet Explorer XDomainRequest\n\n    EventSource.prototype.XHR = function (evs) {\n      /* global XDomainRequest */\n      var request = new XDomainRequest();\n      this._request = request; // set handlers\n\n      request.onprogress = function () {\n        request._ready = true;\n\n        evs._onxhrdata();\n      };\n\n      request.onload = function () {\n        this._loaded = true;\n\n        evs._onxhrdata();\n      };\n\n      request.onerror = function () {\n        this._failed = true;\n        evs.readyState = evs.CLOSED;\n        evs.dispatchEvent('error', {\n          type: 'error',\n          data: 'XDomainRequest error'\n        });\n      };\n\n      request.ontimeout = function () {\n        this._failed = true;\n        evs.readyState = evs.CLOSED;\n        evs.dispatchEvent('error', {\n          type: 'error',\n          data: 'XDomainRequest timed out'\n        });\n      }; // XDomainRequest does not allow setting custom headers\n      // If EventSource has enabled the use of GET arguments\n      // we add parameters to URL so that server can adapt the stream...\n\n\n      var reqGetArgs = {};\n\n      if (evs.getArgs) {\n        // copy evs.getArgs in reqGetArgs\n        var defaultArgs = evs.getArgs;\n\n        for (var key in defaultArgs) {\n          if (defaultArgs.hasOwnProperty(key)) {\n            reqGetArgs[key] = defaultArgs[key];\n          }\n        }\n\n        if (evs.lastEventId) {\n          reqGetArgs.evs_last_event_id = evs.lastEventId;\n        }\n      } // send the request\n\n\n      request.open('GET', evs.urlWithParams(evs.URL, reqGetArgs));\n      request.send();\n    };\n\n    EventSource.prototype.XHR.prototype = {\n      useXDomainRequest: true,\n      _request: null,\n      _ready: false,\n      // true when progress events are dispatched\n      _loaded: false,\n      // true when request has been loaded\n      _failed: false,\n      // true if when request is in error\n      isReady: function () {\n        return this._request._ready;\n      },\n      isDone: function () {\n        return this._request._loaded;\n      },\n      hasError: function () {\n        return this._request._failed;\n      },\n      getBuffer: function () {\n        var rv = '';\n\n        try {\n          rv = this._request.responseText || '';\n        } catch (err) {// intentional noop\n        }\n\n        return rv;\n      },\n      abort: function () {\n        if (this._request) {\n          this._request.abort();\n        }\n      }\n    };\n  } else {\n    EventSource.isPolyfill = 'XHR'; // EventSource will send request using XMLHttpRequest\n\n    EventSource.prototype.XHR = function (evs) {\n      var request = new XMLHttpRequest();\n      this._request = request;\n      evs._xhr = this; // set handlers\n\n      request.onreadystatechange = function () {\n        if (request.readyState > 1 && evs.readyState != evs.CLOSED) {\n          if (request.status == 200 || request.status >= 300 && request.status < 400) {\n            evs._onxhrdata();\n          } else {\n            request._failed = true;\n            evs.readyState = evs.CLOSED;\n            evs.dispatchEvent('error', {\n              type: 'error',\n              data: 'The server responded with ' + request.status\n            });\n            evs.close();\n          }\n        }\n      };\n\n      request.onprogress = function () {// intentional noop\n      };\n\n      request.open('GET', evs.urlWithParams(evs.URL, evs.getArgs), true);\n      var headers = evs.xhrHeaders; // maybe null\n\n      for (var header in headers) {\n        if (headers.hasOwnProperty(header)) {\n          request.setRequestHeader(header, headers[header]);\n        }\n      }\n\n      if (evs.lastEventId) {\n        request.setRequestHeader('Last-Event-Id', evs.lastEventId);\n      }\n\n      request.send();\n    };\n\n    EventSource.prototype.XHR.prototype = {\n      useXDomainRequest: false,\n      _request: null,\n      _failed: false,\n      // true if we have had errors...\n      isReady: function () {\n        return this._request.readyState >= 2;\n      },\n      isDone: function () {\n        return this._request.readyState == 4;\n      },\n      hasError: function () {\n        return this._failed || this._request.status >= 400;\n      },\n      getBuffer: function () {\n        var rv = '';\n\n        try {\n          rv = this._request.responseText || '';\n        } catch (err) {// intentional noop\n        }\n\n        return rv;\n      },\n      abort: function () {\n        if (this._request) {\n          this._request.abort();\n        }\n      }\n    };\n  }\n\n  function MessageEvent(type, data, origin, lastEventId) {\n    this.bubbles = false;\n    this.cancelBubble = false;\n    this.cancelable = false;\n    this.data = data || null;\n    this.origin = origin || '';\n    this.lastEventId = lastEventId || '';\n    this.type = type || 'message';\n  }\n\n  function isOldIE() {\n    //return true if we are in IE8 or IE9\n    return Boolean(typeof window !== 'undefined' && window.XDomainRequest && window.XMLHttpRequest && new XMLHttpRequest().responseType === undefined);\n  }\n\n  return EventSource;\n});","map":{"version":3,"sources":["/Users/bartlomiejkisiel/Downloads/zarzucamy-sieci-master-3/node_modules/@rexxars/eventsource-polyfill/src/eventsource.js"],"names":["root","factory","define","amd","module","exports","global","EventSource","_eventSourceImportPrefix","evsImportName","self","url","options","SyntaxError","URL","setOptions","evs","setTimeout","poll","prototype","CONNECTING","OPEN","CLOSED","defaultOptions","loggingEnabled","loggingPrefix","interval","bufferSizeLimit","silentTimeout","getArgs","evs_buffer_size_limit","xhrHeaders","Accept","defaults","option","hasOwnProperty","console","log","message","readyState","cleanup","cursor","cache","_xhr","XHR","resetNoActivityTimer","err","dispatchEvent","type","data","pollAgain","_pollTimer","clearInterval","_noActivityTimer","abort","close","_onxhrdata","request","isReady","hasError","buffer","getBuffer","length","substring","lastMessageIndex","newcursor","toparse","parseStream","isDone","chunk","normalizeToLF","events","split","i","j","eventType","datas","line","retry","parts","trimWhiteSpace","indexOf","replace","parseInt","isNaN","push","lastEventId","event","MessageEvent","join","window","location","origin","handlers","call","addEventListener","handler","removeEventListener","splice","_noactivityTimer","onerror","onmessage","onopen","urlWithParams","baseURL","params","encodedArgs","key","urlarg","urlize","encodeURIComponent","text","ln2","lastIndexOf","lr2","lrln2","Math","max","str","reTrim","isOldIE","isPolyfill","evs_preamble","XDomainRequest","_request","onprogress","_ready","onload","_loaded","_failed","ontimeout","reqGetArgs","defaultArgs","evs_last_event_id","open","send","useXDomainRequest","rv","responseText","XMLHttpRequest","onreadystatechange","status","headers","header","setRequestHeader","bubbles","cancelBubble","cancelable","Boolean","responseType","undefined"],"mappings":"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","sourcesContent":["/*\n * EventSource polyfill\n * Originally published by sc AmvTek srl (https://github.com/amvtek/EventSource) - devel@amvtek.com\n * Forked by Espen Hovlandsdal to fix a few issues + publish latest version\n */\n\n;(function (root, factory) {\n  /* global define */\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS\n    module.exports = factory()\n  } else {\n    // Browser globals (root is window)\n    if (global.EventSource && !global._eventSourceImportPrefix) {\n      return\n    }\n\n    var evsImportName = (root._eventSourceImportPrefix || '') + 'EventSource'\n    root[evsImportName] = factory()\n  }\n})(typeof self === 'undefined' ? this : self, function () {\n  var EventSource = function (url, options) {\n    if (!url || typeof url != 'string') {\n      throw new SyntaxError('Not enough arguments')\n    }\n\n    this.URL = url\n    this.setOptions(options)\n    var evs = this\n    setTimeout(function () {\n      evs.poll()\n    }, 0)\n  }\n\n  EventSource.prototype = {\n    CONNECTING: 0,\n\n    OPEN: 1,\n\n    CLOSED: 2,\n\n    defaultOptions: {\n      loggingEnabled: false,\n\n      loggingPrefix: 'eventsource',\n\n      interval: 500, // milliseconds\n\n      bufferSizeLimit: 256 * 1024, // bytes\n\n      silentTimeout: 300000, // milliseconds\n\n      getArgs: {\n        evs_buffer_size_limit: 256 * 1024,\n      },\n\n      xhrHeaders: {\n        Accept: 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'X-Requested-With': 'XMLHttpRequest',\n      },\n    },\n\n    setOptions: function (options) {\n      var defaults = this.defaultOptions\n      var option\n\n      // set all default options...\n      for (option in defaults) {\n        if (defaults.hasOwnProperty(option)) {\n          this[option] = defaults[option]\n        }\n      }\n\n      // override with what is in options\n      for (option in options) {\n        if (option in defaults && options.hasOwnProperty(option)) {\n          this[option] = options[option]\n        }\n      }\n\n      // if getArgs option is enabled\n      // ensure evs_buffer_size_limit corresponds to bufferSizeLimit\n      if (this.getArgs && this.bufferSizeLimit) {\n        this.getArgs.evs_buffer_size_limit = this.bufferSizeLimit\n      }\n\n      // if console is not available, force loggingEnabled to false\n      // eslint-disable-next-line no-console\n      if (typeof console === 'undefined' || typeof console.log === 'undefined') {\n        this.loggingEnabled = false\n      }\n    },\n\n    log: function (message) {\n      if (this.loggingEnabled) {\n        // eslint-disable-next-line no-console\n        console.log('[' + this.loggingPrefix + ']:' + message)\n      }\n    },\n\n    poll: function () {\n      try {\n        if (this.readyState == this.CLOSED) {\n          return\n        }\n\n        this.cleanup()\n        this.readyState = this.CONNECTING\n        this.cursor = 0\n        this.cache = ''\n        this._xhr = new this.XHR(this)\n        this.resetNoActivityTimer()\n      } catch (err) {\n        // in an attempt to silence the errors\n        this.log('There were errors inside the pool try-catch')\n        this.dispatchEvent('error', {type: 'error', data: err.message})\n      }\n    },\n\n    pollAgain: function (interval) {\n      // schedule poll to be called after interval milliseconds\n      var evs = this\n      evs.readyState = evs.CONNECTING\n      evs.dispatchEvent('error', {\n        type: 'error',\n        data: 'Reconnecting ',\n      })\n      this._pollTimer = setTimeout(function () {\n        evs.poll()\n      }, interval || 0)\n    },\n\n    cleanup: function () {\n      this.log('evs cleaning up')\n\n      if (this._pollTimer) {\n        clearInterval(this._pollTimer)\n        this._pollTimer = null\n      }\n\n      if (this._noActivityTimer) {\n        clearInterval(this._noActivityTimer)\n        this._noActivityTimer = null\n      }\n\n      if (this._xhr) {\n        this._xhr.abort()\n        this._xhr = null\n      }\n    },\n\n    resetNoActivityTimer: function () {\n      if (this.silentTimeout) {\n        if (this._noActivityTimer) {\n          clearInterval(this._noActivityTimer)\n        }\n        var evs = this\n        this._noActivityTimer = setTimeout(function () {\n          evs.log('Timeout! silentTImeout:' + evs.silentTimeout)\n          evs.pollAgain()\n        }, this.silentTimeout)\n      }\n    },\n\n    close: function () {\n      this.readyState = this.CLOSED\n      this.log('Closing connection. readyState: ' + this.readyState)\n      this.cleanup()\n    },\n\n    _onxhrdata: function () {\n      var request = this._xhr\n\n      if (request.isReady() && !request.hasError()) {\n        // reset the timer, as we have activity\n        this.resetNoActivityTimer()\n\n        // move this EventSource to OPEN state...\n        if (this.readyState == this.CONNECTING) {\n          this.readyState = this.OPEN\n          this.dispatchEvent('open', {type: 'open'})\n        }\n\n        var buffer = request.getBuffer()\n\n        if (buffer.length > this.bufferSizeLimit) {\n          this.log('buffer.length > this.bufferSizeLimit')\n          this.pollAgain()\n        }\n\n        if (this.cursor == 0 && buffer.length > 0) {\n          // skip byte order mark \\uFEFF character if it starts the stream\n          if (buffer.substring(0, 1) == '\\uFEFF') {\n            this.cursor = 1\n          }\n        }\n\n        var lastMessageIndex = this.lastMessageIndex(buffer)\n        if (lastMessageIndex[0] >= this.cursor) {\n          var newcursor = lastMessageIndex[1]\n          var toparse = buffer.substring(this.cursor, newcursor)\n          this.parseStream(toparse)\n          this.cursor = newcursor\n        }\n\n        // if request is finished, reopen the connection\n        if (request.isDone()) {\n          this.log('request.isDone(). reopening the connection')\n          this.pollAgain(this.interval)\n        }\n      } else if (this.readyState !== this.CLOSED) {\n        this.log('this.readyState !== this.CLOSED')\n        this.pollAgain(this.interval)\n\n        //MV: Unsure why an error was previously dispatched\n      }\n    },\n\n    parseStream: function (chunk) {\n      // normalize line separators (\\r\\n,\\r,\\n) to \\n\n      // remove white spaces that may precede \\n\n      chunk = this.cache + this.normalizeToLF(chunk)\n\n      var events = chunk.split('\\n\\n')\n\n      var i, j, eventType, datas, line, retry\n\n      for (i = 0; i < events.length - 1; i++) {\n        eventType = 'message'\n        datas = []\n        var parts = events[i].split('\\n')\n\n        for (j = 0; j < parts.length; j++) {\n          line = this.trimWhiteSpace(parts[j])\n\n          if (line.indexOf('event') == 0) {\n            eventType = line.replace(/event:?\\s*/, '')\n          } else if (line.indexOf('retry') == 0) {\n            retry = parseInt(line.replace(/retry:?\\s*/, ''), 10)\n            if (!isNaN(retry)) {\n              this.interval = retry\n            }\n          } else if (line.indexOf('data') == 0) {\n            datas.push(line.replace(/data:?\\s*/, ''))\n          } else if (line.indexOf('id:') == 0) {\n            this.lastEventId = line.replace(/id:?\\s*/, '')\n          } else if (line.indexOf('id') == 0) {\n            // this resets the id\n\n            this.lastEventId = null\n          }\n        }\n\n        if (datas.length && this.readyState != this.CLOSED) {\n          // dispatch a new event\n          var event = new MessageEvent(\n            eventType,\n            datas.join('\\n'),\n            typeof window !== 'undefined' && typeof window.location !== 'undefined'\n              ? window.location.origin\n              : null,\n            this.lastEventId\n          )\n          this.dispatchEvent(eventType, event)\n        }\n      }\n\n      this.cache = events[events.length - 1]\n    },\n\n    dispatchEvent: function (type, event) {\n      var handlers = this['_' + type + 'Handlers']\n\n      if (handlers) {\n        for (var i = 0; i < handlers.length; i++) {\n          handlers[i].call(this, event)\n        }\n      }\n\n      if (this['on' + type]) {\n        this['on' + type].call(this, event)\n      }\n    },\n\n    addEventListener: function (type, handler) {\n      if (!this['_' + type + 'Handlers']) {\n        this['_' + type + 'Handlers'] = []\n      }\n\n      this['_' + type + 'Handlers'].push(handler)\n    },\n\n    removeEventListener: function (type, handler) {\n      var handlers = this['_' + type + 'Handlers']\n      if (!handlers) {\n        return\n      }\n      for (var i = handlers.length - 1; i >= 0; --i) {\n        if (handlers[i] === handler) {\n          handlers.splice(i, 1)\n          break\n        }\n      }\n    },\n\n    _pollTimer: null,\n\n    _noactivityTimer: null,\n\n    _xhr: null,\n\n    lastEventId: null,\n\n    cache: '',\n\n    cursor: 0,\n\n    onerror: null,\n\n    onmessage: null,\n\n    onopen: null,\n\n    readyState: 0,\n\n    // ===================================================================\n    // helpers functions\n    // those are attached to prototype to ease reuse and testing...\n\n    urlWithParams: function (baseURL, params) {\n      var encodedArgs = []\n\n      if (params) {\n        var key, urlarg\n        var urlize = encodeURIComponent\n\n        for (key in params) {\n          if (params.hasOwnProperty(key)) {\n            urlarg = urlize(key) + '=' + urlize(params[key])\n            encodedArgs.push(urlarg)\n          }\n        }\n      }\n\n      if (encodedArgs.length > 0) {\n        if (baseURL.indexOf('?') == -1) return baseURL + '?' + encodedArgs.join('&')\n        return baseURL + '&' + encodedArgs.join('&')\n      }\n      return baseURL\n    },\n\n    lastMessageIndex: function (text) {\n      var ln2 = text.lastIndexOf('\\n\\n')\n      var lr2 = text.lastIndexOf('\\r\\r')\n      var lrln2 = text.lastIndexOf('\\r\\n\\r\\n')\n\n      if (lrln2 > Math.max(ln2, lr2)) {\n        return [lrln2, lrln2 + 4]\n      }\n      return [Math.max(ln2, lr2), Math.max(ln2, lr2) + 2]\n    },\n\n    trimWhiteSpace: function (str) {\n      // to remove whitespaces left and right of string\n\n      var reTrim = /^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g\n      return str.replace(reTrim, '')\n    },\n\n    normalizeToLF: function (str) {\n      // replace \\r and \\r\\n with \\n\n      return str.replace(/\\r\\n|\\r/g, '\\n')\n    },\n  }\n\n  if (isOldIE()) {\n    EventSource.isPolyfill = 'IE_8-9'\n\n    // patch EventSource defaultOptions\n    var defaults = EventSource.prototype.defaultOptions\n    defaults.xhrHeaders = null // no headers will be sent\n    defaults.getArgs.evs_preamble = 2048 + 8\n\n    // EventSource will send request using Internet Explorer XDomainRequest\n    EventSource.prototype.XHR = function (evs) {\n      /* global XDomainRequest */\n      var request = new XDomainRequest()\n      this._request = request\n\n      // set handlers\n      request.onprogress = function () {\n        request._ready = true\n        evs._onxhrdata()\n      }\n\n      request.onload = function () {\n        this._loaded = true\n        evs._onxhrdata()\n      }\n\n      request.onerror = function () {\n        this._failed = true\n        evs.readyState = evs.CLOSED\n        evs.dispatchEvent('error', {\n          type: 'error',\n          data: 'XDomainRequest error',\n        })\n      }\n\n      request.ontimeout = function () {\n        this._failed = true\n        evs.readyState = evs.CLOSED\n        evs.dispatchEvent('error', {\n          type: 'error',\n          data: 'XDomainRequest timed out',\n        })\n      }\n\n      // XDomainRequest does not allow setting custom headers\n      // If EventSource has enabled the use of GET arguments\n      // we add parameters to URL so that server can adapt the stream...\n      var reqGetArgs = {}\n      if (evs.getArgs) {\n        // copy evs.getArgs in reqGetArgs\n        var defaultArgs = evs.getArgs\n        for (var key in defaultArgs) {\n          if (defaultArgs.hasOwnProperty(key)) {\n            reqGetArgs[key] = defaultArgs[key]\n          }\n        }\n        if (evs.lastEventId) {\n          reqGetArgs.evs_last_event_id = evs.lastEventId\n        }\n      }\n      // send the request\n\n      request.open('GET', evs.urlWithParams(evs.URL, reqGetArgs))\n      request.send()\n    }\n\n    EventSource.prototype.XHR.prototype = {\n      useXDomainRequest: true,\n\n      _request: null,\n\n      _ready: false, // true when progress events are dispatched\n\n      _loaded: false, // true when request has been loaded\n\n      _failed: false, // true if when request is in error\n\n      isReady: function () {\n        return this._request._ready\n      },\n\n      isDone: function () {\n        return this._request._loaded\n      },\n\n      hasError: function () {\n        return this._request._failed\n      },\n\n      getBuffer: function () {\n        var rv = ''\n        try {\n          rv = this._request.responseText || ''\n        } catch (err) {\n          // intentional noop\n        }\n        return rv\n      },\n\n      abort: function () {\n        if (this._request) {\n          this._request.abort()\n        }\n      },\n    }\n  } else {\n    EventSource.isPolyfill = 'XHR'\n\n    // EventSource will send request using XMLHttpRequest\n    EventSource.prototype.XHR = function (evs) {\n      var request = new XMLHttpRequest()\n      this._request = request\n      evs._xhr = this\n\n      // set handlers\n      request.onreadystatechange = function () {\n        if (request.readyState > 1 && evs.readyState != evs.CLOSED) {\n          if (request.status == 200 || (request.status >= 300 && request.status < 400)) {\n            evs._onxhrdata()\n          } else {\n            request._failed = true\n            evs.readyState = evs.CLOSED\n            evs.dispatchEvent('error', {\n              type: 'error',\n              data: 'The server responded with ' + request.status,\n            })\n            evs.close()\n          }\n        }\n      }\n\n      request.onprogress = function () {\n        // intentional noop\n      }\n\n      request.open('GET', evs.urlWithParams(evs.URL, evs.getArgs), true)\n\n      var headers = evs.xhrHeaders // maybe null\n      for (var header in headers) {\n        if (headers.hasOwnProperty(header)) {\n          request.setRequestHeader(header, headers[header])\n        }\n      }\n      if (evs.lastEventId) {\n        request.setRequestHeader('Last-Event-Id', evs.lastEventId)\n      }\n\n      request.send()\n    }\n\n    EventSource.prototype.XHR.prototype = {\n      useXDomainRequest: false,\n\n      _request: null,\n\n      _failed: false, // true if we have had errors...\n\n      isReady: function () {\n        return this._request.readyState >= 2\n      },\n\n      isDone: function () {\n        return this._request.readyState == 4\n      },\n\n      hasError: function () {\n        return this._failed || this._request.status >= 400\n      },\n\n      getBuffer: function () {\n        var rv = ''\n        try {\n          rv = this._request.responseText || ''\n        } catch (err) {\n          // intentional noop\n        }\n        return rv\n      },\n\n      abort: function () {\n        if (this._request) {\n          this._request.abort()\n        }\n      },\n    }\n  }\n\n  function MessageEvent(type, data, origin, lastEventId) {\n    this.bubbles = false\n    this.cancelBubble = false\n    this.cancelable = false\n    this.data = data || null\n    this.origin = origin || ''\n    this.lastEventId = lastEventId || ''\n    this.type = type || 'message'\n  }\n\n  function isOldIE() {\n    //return true if we are in IE8 or IE9\n    return Boolean(\n      typeof window !== 'undefined' &&\n        window.XDomainRequest &&\n        window.XMLHttpRequest &&\n        new XMLHttpRequest().responseType === undefined\n    )\n  }\n\n  return EventSource\n})\n"]},"metadata":{},"sourceType":"script"}
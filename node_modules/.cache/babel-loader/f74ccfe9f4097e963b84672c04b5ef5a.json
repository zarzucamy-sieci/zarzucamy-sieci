{"ast":null,"code":"'use strict';\n\nvar global = require('../util/global');\n\nvar objectAssign = require('object-assign');\n\nmodule.exports = function () {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var Observable = opts.implementation || global.Observable;\n\n  if (!Observable) {\n    throw new Error('`Observable` is not available in global scope, and no implementation was passed');\n  }\n\n  return {\n    onReturn: function onReturn(channels, context) {\n      return new Observable(function (observer) {\n        channels.error.subscribe(function (err) {\n          return observer.error(err);\n        });\n        channels.progress.subscribe(function (event) {\n          return observer.next(objectAssign({\n            type: 'progress'\n          }, event));\n        });\n        channels.response.subscribe(function (response) {\n          observer.next(objectAssign({\n            type: 'response'\n          }, response));\n          observer.complete();\n        });\n        channels.request.publish(context);\n        return function () {\n          return channels.abort.publish();\n        };\n      });\n    }\n  };\n};","map":{"version":3,"sources":["../../src/middleware/observable.js"],"names":["global","require","objectAssign","module","opts","Observable","onReturn","channels","observer","type"],"mappings":";;AAAA,IAAMA,MAAAA,GAASC,OAAAA,CAAf,gBAAeA,CAAf;;AACA,IAAMC,YAAAA,GAAeD,OAAAA,CAArB,eAAqBA,CAArB;;AAEAE,MAAAA,CAAAA,OAAAA,GAAiB,YAAe;AAAA,MAAdC,IAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAP,EAAO;AAC9B,MAAMC,UAAAA,GAAaD,IAAAA,CAAAA,cAAAA,IAAuBJ,MAAAA,CAA1C,UAAA;;AACA,MAAI,CAAJ,UAAA,EAAiB;AACf,UAAM,IAAA,KAAA,CAAN,iFAAM,CAAN;AAGD;;AAED,SAAO;AACLM,IAAAA,QAAAA,EAAU,SAAA,QAAA,CAAA,QAAA,EAAA,OAAA,EAAA;AAAA,aACR,IAAA,UAAA,CAAe,UAAA,QAAA,EAAY;AACzBC,QAAAA,QAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CAAyB,UAAA,GAAA,EAAA;AAAA,iBAAOC,QAAAA,CAAAA,KAAAA,CAAP,GAAOA,CAAP;AAAzBD,SAAAA;AACAA,QAAAA,QAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAA4B,UAAA,KAAA,EAAA;AAAA,iBAASC,QAAAA,CAAAA,IAAAA,CAAcN,YAAAA,CAAa;AAACO,YAAAA,IAAAA,EAAdP;AAAa,WAAbA,EAAvB,KAAuBA,CAAdM,CAAT;AAA5BD,SAAAA;AACAA,QAAAA,QAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAA4B,UAAA,QAAA,EAAY;AACtCC,UAAAA,QAAAA,CAAAA,IAAAA,CAAcN,YAAAA,CAAa;AAACO,YAAAA,IAAAA,EAAdP;AAAa,WAAbA,EAAdM,QAAcN,CAAdM;AACAA,UAAAA,QAAAA,CAAAA,QAAAA;AAFFD,SAAAA;AAKAA,QAAAA,QAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,OAAAA;AACA,eAAO,YAAA;AAAA,iBAAMA,QAAAA,CAAAA,KAAAA,CAAN,OAAMA,EAAN;AAAP,SAAA;AAVM,OACR,CADQ;AAAA;AADL,GAAP;AARFJ,CAAAA","sourcesContent":["const global = require('../util/global')\nconst objectAssign = require('object-assign')\n\nmodule.exports = (opts = {}) => {\n  const Observable = opts.implementation || global.Observable\n  if (!Observable) {\n    throw new Error(\n      '`Observable` is not available in global scope, and no implementation was passed'\n    )\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new Observable(observer => {\n        channels.error.subscribe(err => observer.error(err))\n        channels.progress.subscribe(event => observer.next(objectAssign({type: 'progress'}, event)))\n        channels.response.subscribe(response => {\n          observer.next(objectAssign({type: 'response'}, response))\n          observer.complete()\n        })\n\n        channels.request.publish(context)\n        return () => channels.abort.publish()\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
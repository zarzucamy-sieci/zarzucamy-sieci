{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar scan_1 = require(\"./scan\");\n\nvar takeLast_1 = require(\"./takeLast\");\n\nvar defaultIfEmpty_1 = require(\"./defaultIfEmpty\");\n\nvar pipe_1 = require(\"../util/pipe\");\n\nfunction reduce(accumulator, seed) {\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source) {\n      return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n    };\n  }\n\n  return function reduceOperatorFunction(source) {\n    return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n      return accumulator(acc, value, index + 1);\n    }), takeLast_1.takeLast(1))(source);\n  };\n}\n\nexports.reduce = reduce;","map":{"version":3,"sources":["../../src/internal/operators/reduce.ts"],"names":[],"mappings":";;;;;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AA2DA,SAAgB,MAAhB,CAA6B,WAA7B,EAA2F,IAA3F,EAAuG;AAMrG,MAAI,SAAS,CAAC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,WAAO,SAAS,8BAAT,CAAwC,MAAxC,EAA6D;AAClE,aAAO,MAAA,CAAA,IAAA,CAAK,MAAA,CAAA,IAAA,CAAK,WAAL,EAAkB,IAAlB,CAAL,EAA8B,UAAA,CAAA,QAAA,CAAS,CAAT,CAA9B,EAA2C,gBAAA,CAAA,cAAA,CAAe,IAAf,CAA3C,EAAiE,MAAjE,CAAP;AACD,KAFD;AAGD;;AACD,SAAO,SAAS,sBAAT,CAAgC,MAAhC,EAAqD;AAC1D,WAAO,MAAA,CAAA,IAAA,CACL,MAAA,CAAA,IAAA,CAAe,UAAC,GAAD,EAAM,KAAN,EAAa,KAAb,EAAkB;AAAK,aAAA,WAAW,CAAC,GAAD,EAAM,KAAN,EAAa,KAAK,GAA7B,CAAW,CAAX;AAAkC,KAAxE,CADK,EAEL,UAAA,CAAA,QAAA,CAAS,CAAT,CAFK,EAGL,MAHK,CAAP;AAID,GALD;AAMD;;AAjBD,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar scan_1 = require(\"./scan\");\nvar takeLast_1 = require(\"./takeLast\");\nvar defaultIfEmpty_1 = require(\"./defaultIfEmpty\");\nvar pipe_1 = require(\"../util/pipe\");\nfunction reduce(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) { return accumulator(acc, value, index + 1); }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map"]},"metadata":{},"sourceType":"script"}
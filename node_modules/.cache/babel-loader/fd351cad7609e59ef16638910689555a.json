{"ast":null,"code":"\"use strict\";\n\nvar generateHelpUrl = require('@sanity/generate-help-url');\n\nvar urlBuilder = require('@sanity/image-url');\n\nvar objectAssign = require('object-assign');\n\nvar enc = encodeURIComponent;\nvar materializeError = \"You must either:\\n  - Pass `projectId` and `dataset` to the block renderer\\n  - Materialize images to include the `url` field.\\n\\nFor more information, see \".concat(generateHelpUrl('block-content-image-materializing'));\n\nvar getQueryString = function getQueryString(options) {\n  var query = options.imageOptions;\n  var keys = Object.keys(query);\n\n  if (!keys.length) {\n    return '';\n  }\n\n  var params = keys.map(function (key) {\n    return \"\".concat(enc(key), \"=\").concat(enc(query[key]));\n  });\n  return \"?\".concat(params.join('&'));\n};\n\nvar buildUrl = function buildUrl(props) {\n  var node = props.node,\n      options = props.options;\n  var projectId = options.projectId,\n      dataset = options.dataset;\n  var asset = node.asset;\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property');\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options);\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError);\n  }\n\n  var ref = asset._ref;\n\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`');\n  }\n\n  return urlBuilder(objectAssign({\n    projectId: projectId,\n    dataset: dataset\n  }, options.imageOptions || {})).image(node).toString();\n};\n\nmodule.exports = buildUrl;","map":{"version":3,"sources":["../src/getImageUrl.js"],"names":["generateHelpUrl","require","urlBuilder","objectAssign","enc","materializeError","getQueryString","query","options","keys","Object","params","buildUrl","node","props","projectId","dataset","asset","ref","module"],"mappings":";;AAAA,IAAMA,eAAe,GAAGC,OAAO,CAA/B,2BAA+B,CAA/B;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAA1B,mBAA0B,CAA1B;;AACA,IAAME,YAAY,GAAGF,OAAO,CAA5B,eAA4B,CAA5B;;AAEA,IAAMG,GAAG,GAAT,kBAAA;AACA,IAAMC,gBAAgB,GAAA,+JAAA,MAAA,CAIML,eAAe,CAJ3C,mCAI2C,CAJrB,CAAtB;;AAMA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAA,OAAA,EAAW;AAChC,MAAMC,KAAK,GAAGC,OAAO,CAArB,YAAA;AACA,MAAMC,IAAI,GAAGC,MAAM,CAANA,IAAAA,CAAb,KAAaA,CAAb;;AACA,MAAI,CAACD,IAAI,CAAT,MAAA,EAAkB;AAChB,WAAA,EAAA;AACD;;AAED,MAAME,MAAM,GAAG,IAAI,CAAJ,GAAA,CAAS,UAAA,GAAA,EAAG;AAAA,WAAA,GAAA,MAAA,CAAOP,GAAG,CAAV,GAAU,CAAV,EAAA,GAAA,EAAA,MAAA,CAAmBA,GAAG,CAACG,KAAK,CAA5B,GAA4B,CAAN,CAAtB,CAAA;AAA3B,GAAe,CAAf;AACA,SAAA,IAAA,MAAA,CAAWI,MAAM,CAANA,IAAAA,CAAX,GAAWA,CAAX,CAAA;AARF,CAAA;;AAWA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAS;AAAA,MACjBC,IADiB,GACAC,KADA,CAAA,IAAA;AAAA,MACXN,OADW,GACAM,KADA,CAAA,OAAA;AAAA,MAEjBC,SAFiB,GAEKP,OAFL,CAAA,SAAA;AAAA,MAENQ,OAFM,GAEKR,OAFL,CAAA,OAAA;AAGxB,MAAMS,KAAK,GAAGJ,IAAI,CAAlB,KAAA;;AAEA,MAAI,CAAJ,KAAA,EAAY;AACV,UAAM,IAAA,KAAA,CAAN,+CAAM,CAAN;AACD;;AAED,MAAII,KAAK,CAAT,GAAA,EAAe;AACb,WAAOA,KAAK,CAALA,GAAAA,GAAYX,cAAc,CAAjC,OAAiC,CAAjC;AACD;;AAED,MAAI,CAAA,SAAA,IAAc,CAAlB,OAAA,EAA4B;AAC1B,UAAM,IAAA,KAAA,CAAN,gBAAM,CAAN;AACD;;AAED,MAAMY,GAAG,GAAGD,KAAK,CAAjB,IAAA;;AACA,MAAI,CAAJ,GAAA,EAAU;AACR,UAAM,IAAA,KAAA,CAAN,8DAAM,CAAN;AACD;;AAED,SAAOf,UAAU,CAACC,YAAY,CAAC;AAACY,IAAAA,SAAS,EAAV,SAAA;AAAYC,IAAAA,OAAO,EAAPA;AAAZ,GAAD,EAAuBR,OAAO,CAAPA,YAAAA,IAA9CN,EAAuB,CAAb,CAAVA,CAAAA,KAAAA,CAAAA,IAAAA,EAAP,QAAOA,EAAP;AAtBF,CAAA;;AA2BAiB,MAAM,CAANA,OAAAA,GAAAA,QAAAA","sourcesContent":["const generateHelpUrl = require('@sanity/generate-help-url')\nconst urlBuilder = require('@sanity/image-url')\nconst objectAssign = require('object-assign')\n\nconst enc = encodeURIComponent\nconst materializeError = `You must either:\n  - Pass \\`projectId\\` and \\`dataset\\` to the block renderer\n  - Materialize images to include the \\`url\\` field.\n\nFor more information, see ${generateHelpUrl('block-content-image-materializing')}`\n\nconst getQueryString = options => {\n  const query = options.imageOptions\n  const keys = Object.keys(query)\n  if (!keys.length) {\n    return ''\n  }\n\n  const params = keys.map(key => `${enc(key)}=${enc(query[key])}`)\n  return `?${params.join('&')}`\n}\n\nconst buildUrl = props => {\n  const {node, options} = props\n  const {projectId, dataset} = options\n  const asset = node.asset\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property')\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options)\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError)\n  }\n\n  const ref = asset._ref\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`')\n  }\n\n  return urlBuilder(objectAssign({projectId, dataset}, options.imageOptions || {}))\n    .image(node)\n    .toString()\n}\n\nmodule.exports = buildUrl\n"]},"metadata":{},"sourceType":"script"}